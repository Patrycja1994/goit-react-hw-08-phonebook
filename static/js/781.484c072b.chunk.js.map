{"version":3,"file":"static/js/781.484c072b.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsForm/ContactsForm.module.css?d5f2","components/ContactsForm/ContactsForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilterValue = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [getContacts, getFilterValue],\n  (contacts, filter) => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n);","// extracted by mini-css-extract-plugin\nexport default {\"formSubmit\":\"ContactsForm_formSubmit__luOKq\",\"formSubmit__button\":\"ContactsForm_formSubmit__button__Bagxk\"};","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addNewContact } from 'redux/contacts/operations';\nimport style from './ContactsForm.module.css';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const addContact = e => {\n    e.preventDefault();\n    let nameOntheList = false;\n    const form = e.target;\n    const name = e.target.name.value;\n    const number = e.target.number.value;\n    const toLowerCase = name.toLowerCase();\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    contacts.forEach(({ name }) => {\n      if (name.toLowerCase() === toLowerCase) {\n        alert(`${name} is already in contacts`);\n        nameOntheList = true;\n        form.reset();\n      }\n    });\n\n    if (nameOntheList) return;\n\n    dispatch(addNewContact(newContact));\n    form.reset();\n  };\n  return (\n    <form className={style.formSubmit} onSubmit={addContact}>\n      <label className={style.formSubmit__name}>\n        Name\n        <input\n          autoComplete=\"off\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={style.formSubmit__number}>\n        Number\n        <input\n          autoComplete=\"off\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className={style.formSubmit__button} type=\"submit\">Add contact</button>\n    </form>\n  );\n};\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"id__list\":\"ContactsList_id__list__x6zYv\",\"list\":\"ContactsList_list__mmE3Y\",\"id__button\":\"ContactsList_id__button__NNKtI\",\"id__numberList\":\"ContactsList_id__numberList__VuY3X\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilterValue } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport style from './ContactsList.module.css';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n  \n  const filteredContacts = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  const deleteContacts = data => {\n    dispatch(deleteContact(data));\n};\n  return filteredContacts.length > 0 ? (\n    <ul className={style.list}>\n      {filteredContacts.map(({ id, name, number }) => {\n        return (\n          <li className={style.id__list} key={id}>\n                <p className={style.id__nameList}>{name}:  </p>\n                <p className={style.id__numberList}> {number}</p>\n            <button className={style.id__button} type=\"submit\" onClick={() => deleteContacts(id)}>\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  ) : (\n    <p>No contacts.</p>\n  );\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"labelFilter\":\"Filter_labelFilter__7SBy1\",\"inputFilter\":\"Filter_inputFilter__8QMOp\"};","import { useDispatch } from 'react-redux';\n\nimport { filterContacts } from 'redux/contacts/slicesFilter';\nimport style from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(filterContacts(value));\n  };\n\n  return (\n    <>\n      <label className={style.labelFilter} >Find contacts by name</label>\n      <input className={style.inputFilter} type=\"text\" name=\"filter\" onChange={onChange} />\n    </>\n  );\n};\n\nexport default Filter;","\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport ContactForm from \"components/ContactsForm/ContactsForm\";\nimport ContactList from \"components/ContactsList/ContactsList\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport Filter from 'components/Filter/Filter';\nimport { getLoading } from 'redux/contacts/selectors';\n\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <h1>Your contacts</h1>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progres...'}</div>\n      <Filter />\n\n      <ContactList />\n    </>\n  );\n}"],"names":["getContacts","state","contacts","items","getFilterValue","filter","getLoading","isLoading","createSelector","contact","name","toLowerCase","includes","useSelector","dispatch","useDispatch","className","style","onSubmit","e","preventDefault","nameOntheList","form","target","value","number","newContact","id","nanoid","forEach","alert","reset","addNewContact","autoComplete","type","pattern","title","required","filteredContacts","length","map","onClick","data","deleteContact","onChange","filterContacts","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}